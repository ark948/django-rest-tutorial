add snippets and rest_framework to installed apps
add model to snippets app
make and run migrations
add serializer for snippet model in a new file called serializers.py in snippet app
test the serializer in django shell
refactor the serializer with modelSerializer
write some regular django views
wire the views with snippet/urls.py (add urls.py file)
wire up the snippet urls to main urls
tried to run server, error was raised, unapplied migrations
ran migrations
start server again. works.
part 2 of tutorial: django regular views will be refactored to django rest framework views
two views were added, using api_view decorator for list and detail pages
adding format suffix to urls (allows us to access urls with specific formats like json)

part 3, class-based views.
views.py will be refactored with classes.
snippets/urls.py also gets refactored a bit. (add as_view)
git commit

using mixins: will allows us to easily compose reusable bits of behavior.
using generics will gives us even further conciseness.

part 4: Authentication & Permissions
- snippet model needs to be edited.
tutorial asked to just delete the current database and make a new one. (do not forget to delete the migration files too.)
python manage.py makemigrations snippets
python manage.py migrate
tutorial also asked to create a few different users using createsuperuser command.
i'll create admin now, and other users later.
admin-admin@example.com-1
need a serializer for users too.
also users need some views as well. they will be readonly generic views.
update app urls.py.
the create method of SnippetList needs to be modified to associate creation of new snippets with user objects.
now, SnippetSerializer needs to be updated to reflect that.
now, add required permissions to views. add to snippet list and snippet detail.
next we need to add login to browsable api.
add builtin rest api auth, to project level urls.
we need to make a custom permission. we want all snippets be visible to anyone, but only the owner must be able to edit or delete their snippet.
add permissions.py file.
add the custom permission to snippet detail view

part 5: Relationships and Hyperlinked APIs
adding an endpoint for the root of api (home page) in app views.py
adding endpoint for highlighted snippets. (i don't know what this means)
django rest provides two styles of html renderers. one for html templates and one for pre-rendered html.
we'll use the second one here.
we'll also need to create our own custom view for code highlight view.
we will inherit from genericAPIView and define the get method of it.
add root url to app urls.py and also the url for snippet highlight.
hyperlinking is one of many ways to create relationships between entities.
to add this, we will replace the modelSerializer with HyperlinkedModelSerializer in serializers.py
we also need to add endpoint names to all our url routes.

the following url patterns need names:
- The root of our API refers to 'user-list' and 'snippet-list'.
- Our snippet serializer includes a field that refers to 'snippet-highlight'.
- Our user serializer includes a field that refers to 'snippet-detail'.
- snippet and user serializers include 'url' fields that by default will refer to '{model_name}-detail',in this case will be 'snippet-detail' and 'user-detail'.
add the names to snippet urls.py
adding pagination in settings.py

part 6: viewsets and routers
viewsets add an extra level of abstraction to normal views (they help to write less code)
routers generate urls automatically
refactoring views.py (first userlist and userdetail, will be removed and replaced by one single class)
next, snippet list and detail and highlight will be removed and replaced by a single viewset
now we can create urls manually (done, for demonstration) or use routers to generate them automatically.
